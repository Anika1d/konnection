apply plugin: 'base'
apply plugin: 'maven-publish'
apply plugin: 'signing'
apply plugin: 'com.jfrog.bintray'

task emptyJar(type: Jar) {
    archiveAppendix.set("empty")
}

def selectArtifactId(project, type, defaultName) {
    def name = project.name
    def isCommon = project.ext.has("commonStructure")
    def commonIsRoot = project.ext.has("commonStructure") && project.ext.commonStructure
    def hasNative = project.ext.has("hasNative") && project.ext.hasNative

    switch (type) {
        case 'metadata':
            if (!isCommon) return "$name-$type"
            return "$name-metadata"
            break
        case 'kotlinMultiplatform':
            if (!hasNative) return "$name-kotlinMultiplatform"
            return name
            break
        case 'android':
            return commonIsRoot ? "$name-jvm" : "$name"
            break
        case 'jvm':
            return commonIsRoot ? "$name-android" : "$name"
            break
        default:
            return isCommon || hasNative ? defaultName : "$name"
            break
    }
}

afterEvaluate {
    project.publishing.publications.all {
        // rename artifacts
        groupId = project.group
        if (it.name.contains('metadata')) {
            artifactId = "${project.name}"
        } else {
            artifactId = "${project.name}-$name"
        }
    }
}

def pomConfig = {
    licenses {
        license {
            name "The Apache Software License, Version 2.0"
            url "http://www.apache.org/licenses/LICENSE-2.0.txt"
            distribution "repo"
        }
    }
    developers {
        developer {
            id "magnumrocha"
            name 'Magnum Rocha'
            organization 'TMApps'
            organizationUrl 'http://github.com/TM-Apps'
        }
    }

    scm {
        url "https://github.com/TM-Apps/konnection"
    }
}

def withPom = { pom ->
    def root = asNode()
    root.appendNode('name', project.name)
    root.appendNode('description', 'A Kotlin Multiplatform Mobile library to emit Network Connection status.')
    root.appendNode('url', 'https://github.com/TM-Apps/konnection')
    root.children().last() + pomConfig
}

publishing {
 // repositories {
 //     maven {
 //         url  = 'https://dl.bintray.com/tmapps/maven'
 //     }
 // }

    publications.all {
        pom.withXml(withPom)

        def type = it.name
        def id = selectArtifactId(project, type, it.artifactId)
        it.artifactId = id

        if (name == "kotlinMultiplatform") {
            it.artifact(emptyJar) { classifier 'javadoc' }
            it.artifact(emptyJar) { classifier 'kdoc' }
        }
    }

  // if (rootProject.ext.nonDefaultProjectStructure.contains(project.name)) return

    kotlin.targets.all { target ->
        def publication = publishing.publications.findByName(target.name)

        if (publication != null) {
            if (target.platformType.name == 'jvm') {
                publication.artifact(emptyJar) {
                    classifier 'javadoc'
                }
                publication.artifact dokkaJar
            } else {
                publication.artifact(emptyJar) {
                    classifier 'javadoc'
                }
                publication.artifact(emptyJar) {
                    classifier 'kdoc'
                }
            }

            if (target.platformType.name == 'native') {
                publication.artifact emptyJar
            }
        }
    }
}

bintray {
    user = project.findProperty('bintrayUser') ?: System.getenv('BINTRAY_USER')
    key = project.findProperty('bintrayApiKey') ?: System.getenv('BINTRAY_API_KEY')

  // configurations = ['archives']
  // publications = ['mavenProject']

    publish = true // make files public
    override = true // override existing artifact

    // metadata
    pkg {
        userOrg = 'tmapps'
        repo = 'maven'
        name = 'konnection'
        licenses = ['Apache-2.0']
        vcsUrl = 'https://github.com/TM-Apps/konnection'
        issueTrackerUrl = 'https://github.com/TM-Apps/konnection/issues'
        publicDownloadNumbers = true

        version {
          //  name = project.version
            released = new Date()
            vcsTag = project.version

            gpg {
                sign = true // determines whether to GPG sign the files. The default is false
                // passphrase = System.getenv('BINTRAY_PASSPHRASE')
                // optional. The passphrase for GPG signing'
            }
        }
    }
}

// This specifies the publications to upload to bintray before doing the bintrayUpload gradle task.
// In the mpp configuration of one module after 1.3, it is not uploaded unless you explicitly
// specify artifacts in publications like this.
// It is not necessary to have the findAll part,
// [project name]-kotlinMultiplatform but a directory containing only pom files will be uploaded, so it is better to exclude it.
bintrayUpload.doFirst {
    publications = project.publishing.publications // .collect {
 //     it.name
 // }.findAll {
 //     it != "kotlinMultiplatform"
 // }
}
