if (project.ext.isMacOSHost) {

def moduleFrameworkName = project.name.capitalize()

kotlin {
    // add a platform switching to have an IDE support
 // final def buildForDevice = project.findProperty('kotlin.native.cocoapods.target') == 'ios_arm'
 // final def buildForDevice = project.findProperty('device')?.toBoolean() ?: false

    ios {
        binaries {
            framework {
                baseName = moduleFrameworkName
            }
        }
    }

    cocoapods {
        // configure fields required by CocoaPods
        summary = 'A Kotlin Multiplatform library for Network Connection data.'
        homepage = 'Link to a Kotlin/Native module homepage'

        // set the name for the produced framework, the module name is applied by default
        frameworkName = moduleFrameworkName
    }
}

// apply podspec file adjustments...
tasks.getByName('podspec').doLast {
    def podspecFile = file("${projectDir}/${moduleFrameworkName}.podspec")
    def newPodspecContent = []
    def trimLineBefore = null
    podspecFile.eachLine { line ->
        def trimLine = line.trim()

        if (trimLine.startsWith('spec.name')) {
            line = line.replaceFirst(/=.*/, "= '${moduleFrameworkName}'")
        }
        if (trimLine.startsWith('spec.vendored_frameworks')) {
            line = line.replaceFirst(/=.*/, "= \"build/cocoapods/framework/#{spec.name}.framework\"")
        }
        if (trimLine.startsWith(':name')) {
            line = line.replaceFirst(/=.*/, "=> 'Build ${moduleFrameworkName} library',")
        }
        if (trimLine != trimLineBefore) {
            newPodspecContent << line
        }
        trimLineBefore = trimLine
    }
    podspecFile.text = newPodspecContent.join("\n")
}

// https://youtrack.jetbrains.com/issue/KT-46257
// MPP: Stdlib included more than once for an enabled hierarchical commonization
afterEvaluate {
    def compilation = kotlin.targets["metadata"].compilations["iosMain"]
    compilation.compileKotlinTask.doFirst {
        compilation.compileDependencyFiles = files(
            compilation.compileDependencyFiles.findAll { !it.absolutePath.endsWith("klib/common/stdlib") }
        )
    }
}

}